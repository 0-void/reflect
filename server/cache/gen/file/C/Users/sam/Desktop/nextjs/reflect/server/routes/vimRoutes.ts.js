import { Router } from "../deps.ts";
import vim from "../schema/vimSchema.ts";
const router = new Router();
router.get("/vim/:id", async (ctx) => {
    const vimId = ctx.params.id;
    let response;
    try {
        response = await vim.findOne({ _id: { $oid: vimId } });
    }
    catch (err) {
        ctx.throw(500, Deno.env.get("DENO_ENV") === "development" ? err : "Something went wrong");
    }
    if (!response)
        ctx.throw(404, "vim command not found");
    ctx.response.body = {
        vimCommand: { ...response, _id: response._id.$oid },
    };
});
router.get("/vim", async (ctx) => {
    let response;
    try {
        response = await vim.find();
    }
    catch (err) {
        ctx.throw(500, Deno.env.get("DENO_ENV") === "development" ? err : "Something went wrong");
    }
    ctx.response.body = {
        vimCommands: response,
    };
});
router.post("/vim/add", async (ctx) => {
    if (!ctx.request.hasBody) {
        ctx.throw(400, "Invalid data passed, check the data and try again");
    }
    //TODO check whether the body response is json or some other using if check and parse the response accordingly
    const json = await ctx.request.body();
    const data = json.value;
    //TODO validate inputs before processing. Create a separate function to do all these work
    if (!data ||
        !data.title ||
        !data.action ||
        !data.search ||
        !data.command ||
        !data.keyBinding)
        ctx.throw(400, "Invalid data passed, check the data and try again");
    const newVimCommand = {
        title: data.title,
        action: data.action,
        search: data.search,
        command: data.command,
        keyBinding: data.keyBinding,
    };
    let vimId;
    try {
        vimId = await vim.insertOne(newVimCommand);
    }
    catch (err) {
        ctx.throw(500, Deno.env.get("DENO_ENV") === "development" ? err : "Something went wrong");
    }
    ctx.response.body = { vimId, message: "new vim command saved" };
});
router.patch("/vim/:id", async (ctx) => {
    const vimId = ctx.params.id;
    if (!ctx.request.hasBody) {
        ctx.throw(400, "Invalid data passed, check the data and try again");
    }
    const json = await ctx.request.body();
    const data = json.value;
    if (!data ||
        !data.title ||
        !data.action ||
        !data.search ||
        !data.command ||
        !data.keyBinding)
        ctx.throw(400, "Invalid data passed, check the data and try again");
    let response;
    try {
        response = await vim.updateOne({
            _id: { $oid: vimId },
        }, {
            $set: {
                title: data.title,
                action: data.action,
                search: data.search,
                command: data.command,
                keyBinding: data.keyBinding,
            },
        });
    }
    catch (err) {
        ctx.throw(500, Deno.env.get("DENO_ENV") === "development" ? err : "Something went wrong");
    }
    ctx.response.body = { response, message: "vim command updated" };
});
router.delete("/vim/:id", async (ctx) => {
    const vimId = ctx.params.id;
    let response;
    try {
        response = await vim.deleteOne({ _id: { $oid: vimId } });
    }
    catch (err) {
        ctx.throw(500, Deno.env.get("DENO_ENV") === "development" ? err : "Something went wrong");
    }
    if (!response)
        ctx.throw(404, "vim command delete failed");
    ctx.response.body = { message: "vim command deleted successfully", response };
});
export default router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmltUm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmltUm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHcEMsT0FBTyxHQUFHLE1BQU0sd0JBQXdCLENBQUM7QUFFekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFFNUIsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJO1FBQ0YsUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDeEQ7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLEdBQUcsQ0FBQyxLQUFLLENBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FDMUUsQ0FBQztLQUNIO0lBQ0QsSUFBSSxDQUFDLFFBQVE7UUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBRXZELEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHO1FBQ2xCLFVBQVUsRUFBRSxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtLQUNwRCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFD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